// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxy/path.proto

package proxy

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProxyPathEnd struct {
	ChainId                      string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ClientId                     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId                 string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId                    string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId                       string `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Order                        string `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
	Version                      string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	UpstreamClientId             string `protobuf:"bytes,8,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	CounterpartyUpstreamClientId string `protobuf:"bytes,9,opt,name=counterparty_upstream_client_id,json=counterpartyUpstreamClientId,proto3" json:"counterparty_upstream_client_id,omitempty"`
}

func (m *ProxyPathEnd) Reset()         { *m = ProxyPathEnd{} }
func (m *ProxyPathEnd) String() string { return proto.CompactTextString(m) }
func (*ProxyPathEnd) ProtoMessage()    {}
func (*ProxyPathEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8555b9f5ea37353, []int{0}
}
func (m *ProxyPathEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyPathEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyPathEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyPathEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyPathEnd.Merge(m, src)
}
func (m *ProxyPathEnd) XXX_Size() int {
	return m.Size()
}
func (m *ProxyPathEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyPathEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyPathEnd proto.InternalMessageInfo

func (m *ProxyPathEnd) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProxyPathEnd) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ProxyPathEnd) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *ProxyPathEnd) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ProxyPathEnd) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *ProxyPathEnd) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ProxyPathEnd) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProxyPathEnd) GetUpstreamClientId() string {
	if m != nil {
		return m.UpstreamClientId
	}
	return ""
}

func (m *ProxyPathEnd) GetCounterpartyUpstreamClientId() string {
	if m != nil {
		return m.CounterpartyUpstreamClientId
	}
	return ""
}

func init() {
	proto.RegisterType((*ProxyPathEnd)(nil), "ibc.proxy.prover.v1.ProxyPathEnd")
}

func init() { proto.RegisterFile("proxy/path.proto", fileDescriptor_a8555b9f5ea37353) }

var fileDescriptor_a8555b9f5ea37353 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x9b, 0xfe, 0x7f, 0x9b, 0x66, 0xa8, 0x50, 0xc6, 0x82, 0x69, 0xd5, 0x28, 0xba, 0x71,
	0x61, 0x33, 0x14, 0xdf, 0x40, 0xe9, 0x22, 0xb8, 0x29, 0x82, 0x1b, 0x37, 0x65, 0x32, 0x33, 0x26,
	0x83, 0xe9, 0x4c, 0x98, 0x4e, 0x8a, 0x79, 0x0b, 0x1f, 0xab, 0xcb, 0x2e, 0x5d, 0x4a, 0xfb, 0x22,
	0x92, 0x9b, 0x96, 0x8a, 0xb8, 0x09, 0x39, 0xe7, 0x7c, 0xf7, 0x72, 0x98, 0x8b, 0x7a, 0xb9, 0xd1,
	0xef, 0x25, 0xc9, 0xa9, 0x4d, 0xc3, 0xdc, 0x68, 0xab, 0xf1, 0xb1, 0x8c, 0x59, 0x08, 0x6e, 0xf5,
	0x5d, 0x0a, 0x13, 0x2e, 0xc7, 0xc3, 0x7e, 0xa2, 0x13, 0x0d, 0x39, 0xa9, 0xfe, 0x6a, 0x74, 0x38,
	0x48, 0xb4, 0x4e, 0x32, 0x41, 0x40, 0xc5, 0xc5, 0x2b, 0xa1, 0xaa, 0xac, 0xa3, 0xab, 0x55, 0x13,
	0x75, 0xa7, 0xd5, 0x92, 0x29, 0xb5, 0xe9, 0x44, 0x71, 0x3c, 0x40, 0x1d, 0x96, 0x52, 0xa9, 0x66,
	0x92, 0xfb, 0xce, 0xa5, 0x73, 0xe3, 0x3d, 0xb9, 0xa0, 0x23, 0x8e, 0x4f, 0x91, 0xc7, 0x32, 0x29,
	0x94, 0xad, 0xb2, 0x26, 0x64, 0x9d, 0xda, 0x88, 0x38, 0xbe, 0x46, 0x47, 0x4c, 0x2b, 0x25, 0x98,
	0x95, 0x1a, 0x86, 0xff, 0x01, 0xd0, 0x3d, 0x98, 0x11, 0xc7, 0xe7, 0x08, 0xb1, 0x94, 0x2a, 0x25,
	0xb2, 0x8a, 0xf8, 0x0f, 0x84, 0xb7, 0x73, 0x22, 0x8e, 0x4f, 0x90, 0x9b, 0x6b, 0x03, 0xeb, 0x5b,
	0x90, 0xb5, 0x2b, 0x19, 0x71, 0xdc, 0x47, 0x2d, 0x6d, 0xb8, 0x30, 0x7e, 0x1b, 0xec, 0x5a, 0x60,
	0x1f, 0xb9, 0x4b, 0x61, 0x16, 0x52, 0x2b, 0xdf, 0xad, 0x9b, 0xee, 0x24, 0xbe, 0x45, 0xb8, 0xc8,
	0x17, 0xd6, 0x08, 0x3a, 0x9f, 0x1d, 0x2a, 0x77, 0x00, 0xea, 0xed, 0x93, 0x87, 0x7d, 0xf5, 0x09,
	0xba, 0x60, 0xba, 0x50, 0x56, 0x98, 0x9c, 0x1a, 0x5b, 0xce, 0xfe, 0x18, 0xf5, 0x60, 0xf4, 0xec,
	0x27, 0xf6, 0xfc, 0x6b, 0xcd, 0xfd, 0xe3, 0x6a, 0x13, 0x38, 0xeb, 0x4d, 0xe0, 0x7c, 0x6d, 0x02,
	0xe7, 0x63, 0x1b, 0x34, 0xd6, 0xdb, 0xa0, 0xf1, 0xb9, 0x0d, 0x1a, 0x2f, 0xe3, 0x44, 0xda, 0xb4,
	0x88, 0x43, 0xa6, 0xe7, 0x84, 0x53, 0x4b, 0xe1, 0x41, 0x33, 0x1a, 0x13, 0x19, 0xb3, 0x11, 0x9c,
	0x70, 0x64, 0x44, 0x46, 0x4b, 0x92, 0xbf, 0x25, 0x04, 0x74, 0xdc, 0x86, 0xf3, 0xdc, 0x7d, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xce, 0x30, 0xf6, 0xdd, 0xf8, 0x01, 0x00, 0x00,
}

func (m *ProxyPathEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyPathEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyPathEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyUpstreamClientId) > 0 {
		i -= len(m.CounterpartyUpstreamClientId)
		copy(dAtA[i:], m.CounterpartyUpstreamClientId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.CounterpartyUpstreamClientId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPath(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintPath(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPath(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPath(dAtA []byte, offset int, v uint64) int {
	offset -= sovPath(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProxyPathEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	l = len(m.CounterpartyUpstreamClientId)
	if l > 0 {
		n += 1 + l + sovPath(uint64(l))
	}
	return n
}

func sovPath(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPath(x uint64) (n int) {
	return sovPath(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProxyPathEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyPathEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyPathEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyUpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyUpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPath(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPath
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPath
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPath
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPath
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPath        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPath          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPath = fmt.Errorf("proto: unexpected end of group")
)
